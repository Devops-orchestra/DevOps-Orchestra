from pydantic import BaseModel
from typing import Optional, Dict, Any, List


# 1. Event from GitHub push via GitOps Agent
class CodePushEvent(BaseModel):
    repo: str
    branch: str
    commit_id: str
    config: Optional[Dict[str, Any]]  # Parsed devops_orchestra.yaml


# 2. Event after static code analysis
class CodeAnalysisEvent(BaseModel):
    repo: str
    passed: bool
    warnings: List[str]
    errors: List[str]
    agent: str = "code_analysis_agent"


# 3. Test results generated by the Testing Agent
class TestResultsEvent(BaseModel):
    repo: str
    total_tests: int
    passed: int
    failed: int
    coverage: Optional[float]
    logs: Optional[str]
    agent: str = "testing_agent"


# 4. Docker build success or failure
class BuildReadyEvent(BaseModel):
    repo: str
    image_url: str
    status: str  # "success" or "failed"
    logs: Optional[str]
    agent: str = "build_agent"


# 5. Terraform / Infrastructure provisioning
class IaCReadyEvent(BaseModel):
    repo: str
    resources: List[str]  # e.g., ["EC2", "RDS"]
    status: str           # "success" or "failed"
    outputs: Optional[Dict[str, str]]
    agent: str = "iac_agent"


# 6. Deployment triggered event
class DeploymentEvent(BaseModel):
    repo: str
    service_name: str
    version: str
    strategy: str  # "blue-green", "canary", etc.
    status: str    # "in_progress", "success", "failed"
    agent: str = "deployment_agent"


# 7. Observability/Alert event
class ObservabilityAlertEvent(BaseModel):
    repo: str
    service: str
    issue: str       # e.g., "High CPU", "CrashLoop"
    severity: str    # "info", "warning", "critical"
    metrics: Optional[Dict[str, Any]]
    agent: str = "observability_agent"


# 8. Rollback event
class RollbackEvent(BaseModel):
    repo: str
    service: str
    reason: str
    triggered_by: str  # e.g., "observability_agent", "manual"
    rollback_to: Optional[str]  # version/hash
    agent: str = "deployment_agent"
