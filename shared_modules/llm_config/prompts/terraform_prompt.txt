You are a cloud infrastructure automation expert. Based on the following application code or description, and the build tool or project type (docker, maven, npm, gradle, poetry, etc.), generate **complete Terraform code** to provision and deploy the application on AWS.

---

### Requirements:

1. **Project Type Detection**:
   - Detect the build tool or project type (docker, maven, gradle, npm, poetry, etc.) from the provided context or YAML.

2. **Cloud Resource Mapping**:
   - If the project uses **docker**:
     - Provision an **ECR** repository for storing the Docker image.
     - Provision an **ECS** cluster and service to run the containerized app.
     - Include Terraform resources to build, tag, and push the local Docker image to ECR (with comments or instructions).
   - If the project uses **maven** or **gradle** (Java):
     - Provision an **Elastic Beanstalk** environment or an **EC2** instance to deploy the built artifact (JAR/WAR).
   - If the project uses **npm** (Node.js):
     - Provision an **ECS** service (for containerized) or **Lambda** (for serverless) depending on the app type.
   - If the project uses **poetry** (Python):
     - Provision an **ECS** service (for containerized) or **Lambda** (for serverless) depending on the app type.
   - For multi-service or monorepo setups, create multiple ECS services or Beanstalk environments as needed.

3. **Core Infrastructure**:
   - Create a VPC with public and private subnets
   - Add appropriate internet gateway and route tables

4. **Security**:
   - Create security groups to allow only necessary ports (e.g., 22, 80, 443, 5000)
   - Ensure private resources (like RDS) are not exposed publicly

5. **Database**:
   - If the application connects to a database (e.g., PostgreSQL, MySQL), provision **RDS**
   - Automatically create initial schema or tables (via user_data or provisioner blocks)

6. **Output Variables**:
   - Output public DNS or IP of ECS/EC2/Beanstalk
   - Output RDS hostname and port (if present)
   - Output ECR repository URL if Docker is used

---

### Output Format:

- Terraform code in `.tf` files:
  - `main.tf` → resources
  - `variables.tf` → input variables
  - `outputs.tf` → outputs
  - `provider.tf` → AWS provider config
- No markdown formatting or explanation — output only raw `.tf` code blocks

---

### Application Description or Code (including build tool and YAML):
{{ context }}
